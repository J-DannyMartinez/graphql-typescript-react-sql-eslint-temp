{"id":"node_modules/apollo-server-core/dist/graphqlOptions.js","dependencies":[{"name":"/home/terminator_t800/Development/Javascript/playground/relx_test/server/node_modules/apollo-server-core/dist/graphqlOptions.js.map","includedInParent":true,"mtime":1629158426599},{"name":"/home/terminator_t800/Development/Javascript/playground/relx_test/server/node_modules/apollo-server-core/src/graphqlOptions.ts","includedInParent":true,"mtime":1629158426765},{"name":"/home/terminator_t800/Development/Javascript/playground/relx_test/server/package.json","includedInParent":true,"mtime":1629508268358},{"name":"/home/terminator_t800/Development/Javascript/playground/relx_test/server/node_modules/apollo-server-core/package.json","includedInParent":true,"mtime":1629158426539}],"generated":{"js":"\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveGraphqlOptions = void 0;\n\nfunction resolveGraphqlOptions(_x) {\n  return _resolveGraphqlOptions.apply(this, arguments);\n}\n\nfunction _resolveGraphqlOptions() {\n  _resolveGraphqlOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options) {\n    var _len,\n        args,\n        _key,\n        _args = arguments;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof options === 'function')) {\n              _context.next = 7;\n              break;\n            }\n\n            for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = _args[_key];\n            }\n\n            _context.next = 4;\n            return options.apply(void 0, args);\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n            return _context.abrupt(\"return\", options);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _resolveGraphqlOptions.apply(this, arguments);\n}\n\nexports.resolveGraphqlOptions = resolveGraphqlOptions;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":22},"generated":{"line":12,"column":9}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":17,"column":83}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":17,"column":100}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":17,"column":107}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":18,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":19,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":20,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":21,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":23,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":24,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":25,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":26,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":27,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":27,"column":18}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":88,"column":13},"generated":{"line":27,"column":25}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":27,"column":32}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":88,"column":25},"generated":{"line":27,"column":37}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":27,"column":47}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":28,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":29,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":30,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":32,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":86,"column":5},"generated":{"line":32,"column":38}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":32,"column":42}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":86,"column":5},"generated":{"line":33,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":86,"column":5},"generated":{"line":33,"column":14}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":33,"column":18}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":34,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":36,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":37,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":89,"column":17},"generated":{"line":37,"column":19}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":89,"column":24},"generated":{"line":37,"column":26}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":89,"column":17},"generated":{"line":37,"column":32}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":89,"column":28},"generated":{"line":37,"column":41}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":89,"column":17},"generated":{"line":37,"column":45}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":37,"column":46}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":39,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":40,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":42,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":43,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":91,"column":11},"generated":{"line":43,"column":45}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":43,"column":52}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":45,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":46,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":47,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":48,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":49,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":50,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":7},"generated":{"line":51,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":55,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":55,"column":7}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":55,"column":8}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":55,"column":29}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":55,"column":32}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":55,"column":53}}],"sources":{"../src/graphqlOptions.ts":"import {\n  GraphQLSchema,\n  ValidationContext,\n  GraphQLFieldResolver,\n  DocumentNode,\n  GraphQLError,\n  GraphQLFormattedError,\n  ParseOptions,\n} from 'graphql';\nimport { KeyValueCache, InMemoryLRUCache } from 'apollo-server-caching';\nimport { DataSource } from 'apollo-datasource';\nimport { ApolloServerPlugin } from 'apollo-server-plugin-base';\nimport {\n  GraphQLExecutor,\n  ValueOrPromise,\n  GraphQLResponse,\n  GraphQLRequestContext,\n  Logger,\n  SchemaHash,\n} from 'apollo-server-types';\n\n/*\n * GraphQLServerOptions\n *\n * - schema: an executable GraphQL schema used to fulfill requests.\n * - (optional) logger: a `Logger`-compatible implementation to be used for server-level messages.\n * - (optional) formatError: Formatting function applied to all errors before response is sent\n * - (optional) rootValue: rootValue passed to GraphQL execution, or a function to resolving the rootValue from the DocumentNode\n * - (optional) context: the context passed to GraphQL execution\n * - (optional) validationRules: extra validation rules applied to requests\n * - (optional) formatResponse: a function applied to each graphQL execution result\n * - (optional) fieldResolver: a custom default field resolver\n * - (optional) debug: a boolean that will print additional debug logging if execution errors occur\n * - (optional) parseOptions: options to pass when parsing schemas and queries\n *\n */\nexport interface GraphQLServerOptions<\n  TContext = Record<string, any>,\n  TRootValue = any,\n> {\n  schema: GraphQLSchema;\n  schemaHash: SchemaHash;\n  logger?: Logger;\n  formatError?: (error: GraphQLError) => GraphQLFormattedError;\n  rootValue?: ((parsedQuery: DocumentNode) => TRootValue) | TRootValue;\n  context?: TContext | (() => never);\n  validationRules?: Array<(context: ValidationContext) => any>;\n  executor?: GraphQLExecutor;\n  formatResponse?: (\n    response: GraphQLResponse,\n    requestContext: GraphQLRequestContext<TContext>,\n  ) => GraphQLResponse | null;\n  fieldResolver?: GraphQLFieldResolver<any, TContext>;\n  debug?: boolean;\n  dataSources?: () => DataSources<TContext>;\n  cache?: KeyValueCache;\n  persistedQueries?: PersistedQueryOptions;\n  plugins?: ApolloServerPlugin[];\n  documentStore?: InMemoryLRUCache<DocumentNode>;\n  parseOptions?: ParseOptions;\n  __testing_nodeEnv__?: string | undefined;\n}\n\nexport type DataSources<TContext> = {\n  [name: string]: DataSource<TContext>;\n};\n\nexport interface PersistedQueryOptions {\n  cache?: KeyValueCache;\n  /**\n   * Specified in **seconds**, this time-to-live (TTL) value limits the lifespan\n   * of how long the persisted query should be cached.  To specify a desired\n   * lifespan of \"infinite\", set this to `null`, in which case the eviction will\n   * be determined by the cache's eviction policy, but the record will never\n   * simply expire.\n   */\n  ttl?: number | null;\n}\n\nexport default GraphQLServerOptions;\n\nexport async function resolveGraphqlOptions(\n  options:\n    | GraphQLServerOptions\n    | ((...args: Array<any>) => ValueOrPromise<GraphQLServerOptions>),\n  ...args: Array<any>\n): Promise<GraphQLServerOptions> {\n  if (typeof options === 'function') {\n    return await options(...args);\n  } else {\n    return options;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"c77b096697d54f38ec8b099d31a96ccd","cacheData":{"env":{}}}